(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Baskerville"] = factory();
	else
		root["Baskerville"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default, process, registerProcessor, tokenize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"process\", function() { return processTokens; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerProcessor\", function() { return registerProcessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenize\", function() { return tokenizeUserAgent; });\n/* eslint-disable no-param-reassign */\nconst IN_PARENS_EXTRACTOR = new RegExp(\"\\\\(\" // begin parens\n+ \"(?!like)\" // ignore if it starts with \"like\", e.g. KHTML/4.4.3 (like Gecko)\n+ \"(.*?)\" // extract this part\n+ \"\\\\)\", // end parens\n\"g\");\nconst IN_PARENS_SPLITTER = /;\\s*/g;\nconst IN_PARENS_MATCHER = new RegExp(\"(.+?)\" // lazily match anything, and save it -- this is the \"name\" field\n+ \"[/. ]?\" + \"(\" // save the version\n// versions can occasionally start with some text,\n// e.g. ADR-1111101157, as long as that text is separated from the rest by a hyphen\n+ \"(?:\\\\w+-)?\" + \"\\\\d+\" // required to have at least 1 number\n// and a number of alphanumeric fields separated by a dot, underscore or hyphen\n+ \"(?:[._-]?\\\\w)*\" + \")?\" // yeah, version isn't actually required.\n// some tokens have a \"like\" comment,\n// e.g. KHTML, like Gecko or CPU iPhone OS 2_0_1 like Mac OS X\n+ \"(?:,? like (.*?)\\\\s*)?$\");\nconst OUT_PARENS_MATCHER = new RegExp(\"([\\\\w-]+)\" // here's our name field. unlike in parens, spaces are NOT allowed\n+ \"(?:\" + \"/\" // name is separated from the version by a /\n+ \"(\\\\S+)\" // our version field\n+ \")?\" + \"(?:\\\\s+\\\\(like\\\\s+(.*?)\\\\))?\", // and the optional \"like\" comment\n\"g\"); // eslint-disable-next-line max-len\n\nconst BROWSERS = /^applewebkit|camino|chrome|chromeframe|edge|firefox|fluid|gecko|(?:ms)?ie(?: mobile)?|khtml|konqueror|mozilla|opera(?: mobi| mini)?|presto|safari|samsung internet|trident|(?:android|baidu|blackberry|qq|uc) browser$/i; // eslint-disable-next-line max-len\n\nconst OPERATING_SYSTEMS = /^android|beos|blackberry|cri?os|kubuntu|(?:freebsd|linux|openbsd)(?: \\w*)?|macintosh|mac_powerpc|macos|(?:intel|ppc)? ?mac os x|sunos|symbos|ubuntu|win(?:dows )?(?:95|98|nt|ce)?$/i;\nconst processors = [\n/**\n * Identifies the security token.\n *\n * @private\n * @method  processSecurityToken\n *\n * @param   {Object} token       A baskerville token\n * @param   {String} token.name  One of the letters N, U, or I\n *\n * @return  {Boolean}            Return true to prevent additional processing of this token\n */\nfunction processSecurityToken(token) {\n  if (token.name.match(/^[NUI]$/)) {\n    token.type = \"security\";\n\n    switch (token.name) {\n      case \"N\":\n        token.value = \"none\";\n        break;\n\n      case \"U\":\n        token.value = \"strong\";\n        break;\n\n      case \"I\":\n        token.value = \"weak\";\n        break;\n\n      default:\n    }\n\n    return true;\n  }\n\n  return false;\n},\n/**\n * Normalizes a version field, if it exists.\n *\n * @private\n * @method  processVersionField\n *\n * @param   {Object} token            A baskerville token\n * @param   {String} [token.version]  A version field\n */\nfunction processVersionField(token) {\n  if (token.version) {\n    token.version = token.version.replace(/_/g, \".\");\n  }\n},\n/**\n * Process architecture tokens (e.g. 64 bit arch). These initially get misinterpreted as having\n * a version, but that's not true, so, we have to do a bit of reconstructive surgery.\n *\n * @private\n * @method  processArchToken\n *\n * @param   {Object} token       A baskerville token\n *\n * @return  {Boolean}            Return true to prevent additional processing of this token\n */\nfunction processArchToken(token) {\n  if (token.version === \"64\" && [\"Win\", \"x\"].includes(token.name)) {\n    token.name = \"\".concat(token.name).concat(token.version);\n    delete token.version;\n    token.type = \"arch\";\n    return true;\n  }\n\n  return false;\n},\n/**\n * Identifies browsers.\n *\n * @private\n * @method  identifyBrowserTokens\n *\n * @param   {Object} token       A baskerville token\n * @param   {String} token.name  The name of the browser\n */\nfunction identifyBrowserTokens(token) {\n  if (BROWSERS.test(token.name) || token.like && BROWSERS.test(token.like)) {\n    token.type = \"browser\";\n  }\n},\n/**\n * Identifies browsers.\n *\n * @private\n * @method  identifyOSTokens\n *\n * @param   {Object} token       A baskerville token\n * @param   {String} token.name  The name of the operating system\n */\nfunction identifyOSTokens(token) {\n  if (OPERATING_SYSTEMS.test(token.name) || token.like && OPERATING_SYSTEMS.test(token.like)) {\n    token.type = \"os\";\n  }\n}];\n/**\n * Parses an user agent string and returns an array of tokens, sorted by name.\n *\n * @public as \"tokenize\"\n * @method tokenizeUserAgent\n *\n * @param  {String} userAgent  An user agent string\n *\n * @return {Object[]}          A sorted array of tokens\n *\n * @example:\n *   baskerville.tokenize(\"Mozilla/5.0 (compatible; Konqueror/4.4; Linux 2.6.32-22-generic; X11; en_US) KHTML/4.4.3 (like Gecko) Kubuntu\");\n */\n\nfunction tokenizeUserAgent(userAgent) {\n  const tokens = [];\n\n  const compact = obj => Object.keys(obj).forEach(key => obj[key] === undefined && delete obj[key]);\n\n  userAgent.replace(IN_PARENS_EXTRACTOR, (all, inParens) => {\n    for (const tmp of inParens.split(IN_PARENS_SPLITTER)) {\n      const entry = {};\n      [, entry.name, entry.version, entry.like] = tmp.match(IN_PARENS_MATCHER);\n      tokens.push(entry);\n    }\n\n    return \"\";\n  }).replace(OUT_PARENS_MATCHER, (all, name, version, like) => {\n    tokens.push({\n      name,\n      version,\n      like\n    });\n  });\n  tokens.sort((a, b) => {\n    if (a.name.toLowerCase() < b.name.toLowerCase()) {\n      return -1;\n    }\n\n    if (a.name.toLowerCase() > b.name.toLowerCase()) {\n      return 1;\n    }\n\n    if (a.version.toLowerCase() < b.version.toLowerCase()) {\n      return -1;\n    }\n\n    if (a.version.toLowerCase() > b.version.toLowerCase()) {\n      return 1;\n    }\n\n    return 0;\n  });\n  tokens.forEach(compact);\n  return tokens;\n}\n/**\n * Invokes each step in a pipeline of processors until it either reaches the\n * end, or one of them returns true.\n *\n * @private\n * @method  processToken\n *\n * @param   {Object} token  A token\n *\n * @return  {Object}        A processed token\n */\n\n\nfunction processToken(token) {\n  let final = false;\n\n  for (const processor of processors) {\n    if (final) {\n      break;\n    }\n\n    final = processor(token);\n  }\n\n  return token;\n}\n/**\n * Processes a token (or array of tokens), normalizing fields, identifying,\n * and decorating with additional fields. Processing is done by passing a copy\n * of each token thru a pipeline of processors, each of which is allowed to\n * modify the copy. If a processor returns true, processing for that token\n * will end.\n *\n * @public as \"process\"\n * @method processTokens\n *\n * @param  {Object|Object[]} tokens  A token or an array of tokens\n *\n * @return {Object|Object[]}         A processed token or array of processed tokens\n *\n * @example:\n *   baskerville.process(baskerville.tokenize(\"Mozilla/5.0 (compatible; Konqueror/4.4; Linux 2.6.32-22-generic; X11; en_US) KHTML/4.4.3 (like Gecko) Kubuntu\"));\n */\n\n\nfunction processTokens(tokens) {\n  if (typeof tokens === \"string\") {\n    return tokenizeUserAgent(tokens).map(token => processToken(Object.assign({}, token)));\n  }\n\n  if (tokens instanceof Array) {\n    return tokens.map(token => processToken(Object.assign({}, token)));\n  }\n\n  return processToken(Object.assign({}, tokens));\n}\n/**\n * Registers a processor. Each processor, in turn, is given a token, and is\n * permitted to modify that token. If the processor returns true, no further\n * processing will be performed on that token. In this way, a processor can\n * either behave as part of pipeline, identifying/normalizing what it can, or\n * it can take over and produce a final answer.\n *\n * @public\n * @method registerProcessor\n *\n * @param  {Function} processor  A processor\n *\n * @example:\n *   baskerville.registerProcessor(function identifyMobileDevices (token) {\n *     if (token.type === 'browser') {\n *       token.mobile = SOME_REGEX_OF_MOBILE_BROWSERS.test(token.name);\n *     } else if (token.type === 'os') {\n *       token.mobile = SOME_REGEX_OF_MOBILE_OPERATING_SYSTEMS.test(token.name);\n *     }\n *   });\n *\n * @example:\n *   var carmen = require('carmen'); // https://github.com/kmdavis/carmen\n *   baskerville.registerProcessor(function identifyLocale (token) {\n *     var locale = carmen.parse(token.name);\n *     if (locale) {\n *       token.type = 'locale';\n *       token.details = locale;\n *       return true; // We assume full ownership and responsibility for this token.\n *     }\n *     return false; // Let the other children play\n *   });\n */\n\n\nfunction registerProcessor(processor) {\n  processors.push(processor);\n}\n\nconst Baskerville = {\n  process: processTokens,\n  registerProcessor,\n  tokenize: tokenizeUserAgent\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Baskerville);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });
});